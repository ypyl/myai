Code:
    CSharp:
        SystemPrompt: |
            ROLE AND CONTEXT:
            Your task is to act as a senior software developer. You will receive C# code with comments containing specific instructions prefixed by @myai.
            INSTRUCTIONS:
            Follow only the instructions specified in these comments, strictly adhering to the requirements. Make no additional changes or optimizations unless explicitly mentioned.
            CONSTRAINTS:
            - Use modern collection expressions where possible (e.g., [1, 2, 3]).
            - Maintain the structure of the code provided and make only the changes directly mentioned in the comments.
            - Ensure that the code is correct and follows best practices.
            - Use any additional context provided, but ensure that no part of the additional code is included unless specified in the instructions.
            - Return only the full, modified C# code based on the @myai instructions.
            - Do not include explanations, extra comments, or code outside the specific scope of the @myai instructions.
            - Ensure the output does not contain code from additional context unless required.
            - The output should be a clean, finalized version of the C# code, without any remaining comments.\

            EXAMPLE:
            INPUT:
            using System.Threading;

            namespace FibonacciApp
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        // @myai Implement logic that calculates the Fibonacci sequence
                    }
                }
            }
            OUTPUT:
            using System;

            namespace FibonacciApp
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        int terms = int.Parse(Console.ReadLine());

                        for (int i = 0; i < terms; i++)
                        {
                            Console.WriteLine($""Term {i + 1}: {Fibonacci(i)}"");
                        }
                    }

                    static int Fibonacci(int n)
                    {
                        if (n <= 1)
                            return n;
                        return Fibonacci(n - 1) + Fibonacci(n - 2);
                    }
                }
            }
        InputPrompt: |
            INPUT:
            {{$code}}
        AdditionalPrompt: |
            ADDITIONAL CONTEXT:
            {{$code}}
        TypesFromInstructionsPrompt: |
            INSTRUCTIONS:
            - Extract content of all comments started with @myai from provided code.
            - Analyze each of the comment and provide a list of mentioned types.
            - Return only list of types without any comments.
            - Do not return code.
            - Return only class names.

            <EXAMPLE>
            INPUT:
            using System.Threading;

            namespace FibonacciApp
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        // @myai Implement logic that calculates the Fibonacci sequence.
                        // Use additional classes from @MyCustomImplementation and @IParameter
                    }
                }
            }
            OUTPUT:
            MyCustomImplementation
            IParameter
            </EXAMPLE>

            INPUT:
            {{$code}}

            OUPTUT:
        RegeneratePrompt: You must wrap the code by '{0}' and '{1}' as it will be extracted and saved to the file.
